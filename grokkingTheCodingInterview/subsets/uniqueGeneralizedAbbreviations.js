/*
Given a word, write a function to generate all of its unique 
generalized abbreviations.

A generalized abbreviation of a word can be generated by replacing 
each substring of the word with the count of characters in the substring. 
Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. 
After replacing these substrings in the actual word by the count of characters, 
we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.

Note: All contiguous characters should be considered one substring, e.g., we 
can’t take “a” and “b” as substrings to get “11”; since “a” and “b” are contiguous, 
we should consider them together as one substring to get an abbreviation “2”.

Constraints:
- 1 <= word.length <= 15
- word consists of only lowercase English letters.
*/

/*class AbbreviatedWord {
  constructor(str, start, count) {
    this.str = str;
    this.start = start;
    this.count = count;
  }
}*/

class Solution {

  generateGeneralizedAbbreviation(word) {
    const result = [], 
          queue = [ new AbbreviatedWord('', 0, 0) ];

    while (queue.length) {
      let { str, start, count } = queue.shift();

      if (start === word.length) {
        if (count) str += count;
        result.push(str);
      } else {
        queue.push( new AbbreviatedWord(str, start + 1, count + 1) );

        if (count) str += count;
        let newWord = str + word[start];
        queue.push( new AbbreviatedWord(newWord, start + 1, 0) );
      }
    }

    return result;
  }


}
